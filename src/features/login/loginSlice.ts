import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { ethers } from "ethers";
import { RootState } from '../../app/store';
import { checkWallet, connectWallet } from './loginAPI';

declare global {
  interface Window {
    ethereum?: ethers.providers.ExternalProvider;
  }
}

export interface LoginState {
  value: number;
  isLoading: boolean;
  accounts: string[];
  activeAccount?: string;
  isConnecting: boolean;
  // provider?: ethers.providers.Web3Provider;
  hasExtension: boolean;
}

const initialState: LoginState = {
  value: 0,
  accounts: [],
  isLoading: true,
  isConnecting: false,
  hasExtension: !!window.ethereum,
  // provider: window.ethereum ? new ethers.providers.Web3Provider(window.ethereum) : undefined,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const checkWalletAsync = createAsyncThunk<string[], void, { state: RootState }>(
  'login/check',
  async () => {
    const response = await checkWallet();
    return response.data;
  }
);

export const connectWalletAsync = createAsyncThunk<string[], void, { state: RootState }>(
  'login/connect',
  async () => {
    const response = await connectWallet();
    return response.data;
  }
);

export const loginSlice = createSlice({
  name: 'counter',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    changeAccount: (state, action: PayloadAction<string>) => {
      state.activeAccount = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(checkWalletAsync.pending, (state) => {
        state.isLoading = true;
      })
      .addCase(checkWalletAsync.fulfilled, (state, action) => {
        state.accounts = action.payload;
        if(action.payload.length) state.activeAccount = action.payload[0];
        state.isLoading = false;
      })
      .addCase(connectWalletAsync.pending, (state) => {
        state.isConnecting = true;
      })
      .addCase(connectWalletAsync.fulfilled, (state, action) => {
        state.accounts = action.payload;
        if(action.payload.length) state.activeAccount = action.payload[0];
        state.isConnecting = false;
      });
  },
});

export const { changeAccount } = loginSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectIsConnected = (state: RootState) => state.login.accounts.length > 0;
export const selectIsConnecting = (state: RootState) => state.login.isConnecting;
export const selectHasExtension = (state: RootState) => !!state.login.hasExtension;
export const selectIsLoading = (state: RootState) => state.login.isLoading;
export const selectAccounts = (state: RootState) => state.login.accounts;
export const selectActiveAccount = (state: RootState) => state.login.activeAccount;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount: number): AppThunk => (
//   dispatch,
//   getState
// ) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default loginSlice.reducer;
